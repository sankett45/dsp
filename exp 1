
%% EXPERIMENT-1
1.Sine function 
 clear all; 
close all; 
clc; 
N=input('enter the number of cycles:-'); 
n=0:0.05:N; 
x=10*sin(2*pi*n); 
subplot(1,2,1); 
plot(n,x); 
xlabel("Time"); 
ylabel("Amplitude");

title("Continuous time  sine wave"); 
grid; 
subplot(1,2,2); 
stem(n,x); 
xlabel("Time"); 
ylabel("Amplitude"); 
title("Discrete time sine wave"); 
grid; 


2.Traingular 
clear all; 
close all; 
clc; 
N=input('enter the number of cycles:-'); 
M=input('enter amplitude:-'); 
n1=0:1:M; 
n2=M:-1:0; 
n=[]; 
for i=1:N 
n=[n n1 n2]; 
end 
subplot(1,2,1); 

plot(n); 
xlabel("Time"); 
ylabel("Amplitude"); 
title("Continuous time  traingular wave"); 
grid; 
subplot(1,2,2); 
stem(n); 
xlabel("Time"); 
ylabel("Amplitude"); 
title("Discrete time traingular wave"); 
grid;


3.Trapezoid 
clear all; 
close all; 
clc; 
N=input('enter the number of cycles:-'); 
M=input('enter amplitude:-'); 
n1=0:1:M; 
n2=M; 
n3=M; 
n4=M; 
n5=M:-1:0; 
n=[]; 
for i=1:N 
n=[n n1 n2 n3 n4 n5]; 
end 
subplot(2,1,1); 
plot(n); 
xlabel("Time"); 
ylabel("Amplitude"); 
t
 itle("Continuous time  trapezoid wave"); 
grid; 
subplot(2,1,2); 
stem(n); 
xlabel("Time"); 
ylabel("Amplitude"); 
t
 itle("Discrete time trapezoid wave"); 
grid; 


4.Unit Impulse 
clear all;  
close all; 
clc; 
% Define the range for discrete-time indices 
n = -10:10; % Choose a symmetric range for better 
visualization 
% Create the unit impulse function 
x = (n == 0); % Logical condition to create 1 at n=0, 0 
otherwise 
% Plot the discrete-time unit impulse function 
stem(n, x, 'r', 'LineWidth', 1.5); % 'r' for red color 
xlabel("n (Time Index)"); 
ylabel("Amplitude"); 
t
 itle("Discrete-Time Unit Impulse Function"); 
grid on; 


5.Unit Step 
clear all;  
close all; 
clc; 
n = -10:10; % Choose a symmetric range for 
visualization 
x = (n >= 0); % Logical condition: 1 for n >= 0, 0 
otherwise 
% Plot the discrete-time unit step function 
stem(n, x, 'b', 'LineWidth', 1.5); % 'b' for blue color 
xlabel("n (Time Index)"); 
ylabel("Amplitude"); 
t
 itle("Discrete-Time Unit Step Function"); 
grid on;


6.Unit ramp 
clear all;  
close all; 
clc; 
n = -10:10; % Choose a symmetric range for 
visualization 
x = n .* (n >= 0); % Multiply n by the condition (n >= 0) 
stem(n, x, 'g', 'LineWidth', 1.5); % 'g' for green color 
xlabel("n (Time Index)"); 
ylabel("Amplitude"); 
t
 itle("Discrete-Time Unit Ramp Function"); 
grid on; 


7.Parabolic 
clear all;  
close all; 
clc; 
n = -10:10; % Symmetric range for visualization 
x = (n.^2 / 2) .* (n >= 0); % Parabolic equation applied 
for n >= 0 
stem(n, x, 'm', 'LineWidth', 1.5); % 'm' for magenta 
color 
xlabel("n (Time Index)"); 
ylabel("Amplitude"); 
t
 itle("Discrete-Time Parabolic Function"); 
grid on; 


Ex-1: x(n)=u(n+3)+5u(n-15)+4u(n+10) 
clear all; 
close all; 
clc; 
n=-20:1:20; 
u=[zeros(1,20),ones(1,21)]; 
u1=[zeros(1,17),ones(1,24)]; 
u2=[zeros(1,35),ones(1,6)]; 
u3=[zeros(1,10),ones(1,31)]; 
u2=5*u2; 
u3=4*u3; 
x=u1+u2+u3; 
subplot(4,1,1); 
stem(n,u1); 
xlabel("--->n"); 
ylabel("--->u1(n)"); 
t
 itle("u(n+3)"); 
subplot(4,1,2); 
stem(n,u2); 
xlabel("--->n"); 
ylabel("--->u2(n)"); 
t
 itle("u(n-15)"); 
subplot(4,1,3); 
stem(n,u3); 
xlabel("--->n"); 
ylabel("--->u3(n)"); 
t
 itle("u(n+10)"); 
subplot(4,1,4); 
stem(n,x); 
xlabel("--->n"); 
ylabel("--->x(n)"); 
t
 itle("x(n)=u(n+3)+5u(n-15)+4u(n+10)"); 



Ex-2: x(n)=cos(wn)+6a^n 
clear all; 
close all; 
clc; 
n = -20:1:20;         
a = 0.4;              
w = pi/8;              
 % Range of n 
 % Value of a 
% Example frequency for cos(w*n) 
% Define x1(n), x2(n), and x(n) 
x1 = cos(w*n);        
 % x1(n) = cos(w*n) 
x2 = 6 * a.^n;         
x = x1 + x2;           
% Plot x1(n) 
subplot(3,1,1); 
% x2(n) = 6 * a^n 
% x(n) = x1(n) + x2(n) 
stem(n, x1, 'r', 'LineWidth', 1.2); 
xlabel("---> n"); 
ylabel("---> x1(n)"); 
t
 itle("x1(n) = cos(w*n)"); 
% Plot x2(n) 
subplot(3,1,2); 
stem(n, x2, 'b', 'LineWidth', 1.2); 
xlabel("---> n"); 
ylabel("---> x2(n)"); 
t
 itle("x2(n) = 6 * a^n"); 
% Plot x(n) 
subplot(3,1,3); 
stem(n, x, 'g', 'LineWidth', 1.2); 
xlabel("---> n"); 
ylabel("---> x(n)"); 
t
 itle("x(n) = x1(n) + x2(n)"); 
Ex-3: y(n) = u(n) - u(n-10) 
clear all; 
close all; 
clc; 
n = -20:20; 
u = (n >= 0);          
% u(n) 
u_shifted = (n >= 10); % u(n-10) 
y = u - u_shifted;     % y(n) = u(n) - u(n-10) 
y_even = 0.5 * (y + fliplr(y));  % Even part 
y_odd = 0.5 * (y - fliplr(y));   % Odd part 
subplot(3,1,1); 
stem(n, y, 'r', 'LineWidth', 1.2); 
xlabel('---> n'); 
ylabel('---> y(n)'); 
t
 itle('y(n) = u(n) - u(n-10)'); 
grid on; 
subplot(3,1,2); 
stem(n, y_even, 'b', 'LineWidth', 1.2); 
xlabel('---> n'); 
ylabel('---> Even Part'); 
t
 itle('Even Part of y(n)'); 
grid on; 
subplot(3,1,3); 
stem(n, y_odd, 'g', 'LineWidth', 1.2); 
xlabel('---> n'); 
ylabel('---> Odd Part'); 
t
 itle('Odd Part of y(n)'); 
grid on;






